from typing import Any, ClassVar

import euklid_rs.vector

class Transformation:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def apply(self, other: euklid_rs.vector.Vector3D) -> euklid_rs.vector.Vector3D: ...
    def chain(self, other: euklid_rs.vector.Transformation) -> euklid_rs.vector.Transformation: ...
    @classmethod
    def rotation(cls, angle: float, axis: euklid_rs.vector.Vector3D) -> euklid_rs.vector.Transformation: ...
    @classmethod
    def scale(cls, scale: float) -> euklid_rs.vector.Transformation: ...
    @classmethod
    def translation(cls, vec: euklid_rs.vector.Vector3D) -> euklid_rs.vector.Transformation: ...

class Vector2D:
    __hash__: ClassVar[None] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def angle(self, *args, **kwargs) -> Any: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def cross(self, *args, **kwargs) -> Any: ...
    def dot(self, *args, **kwargs) -> Any: ...
    def length(self, *args, **kwargs) -> Any: ...
    def normalized(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...

class Vector3D:
    __hash__: ClassVar[None] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def copy(self, *args, **kwargs) -> Any: ...
    def cross(self, *args, **kwargs) -> Any: ...
    def dot(self, *args, **kwargs) -> Any: ...
    def length(self, *args, **kwargs) -> Any: ...
    def normalized(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...
